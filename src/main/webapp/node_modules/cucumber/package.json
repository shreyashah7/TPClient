{
  "name": "cucumber",
  "description": "The official JavaScript implementation of Cucumber.",
  "keywords": [
    "testing",
    "bdd",
    "cucumber",
    "gherkin",
    "tests"
  ],
  "version": "0.9.2",
  "homepage": "http://github.com/cucumber/cucumber-js",
  "author": {
    "name": "Julien Biezemans",
    "email": "jb@jbpros.com",
    "url": "http://jbpros.net"
  },
  "contributors": [
    {
      "name": "Julien Biezemans",
      "email": "jb@jbpros.com",
      "url": "http://jbpros.net"
    },
    {
      "name": "Fernando Acorreia",
      "email": "fernandoacorreia@gmail.com"
    },
    {
      "name": "Paul Jensen",
      "email": "paulbjensen@gmail.com"
    },
    {
      "name": "Kushal Pisavadia"
    },
    {
      "name": "Olivier Melcher",
      "email": "olivier.melcher@gmail.com"
    },
    {
      "name": "Tristan Dunn",
      "email": "tristanzdunn@gmail.com"
    },
    {
      "name": "Ted de Koning"
    },
    {
      "name": "Renier Morales",
      "email": "renier@morales-rodriguez.net"
    },
    {
      "name": "Aslak Hellesøy",
      "email": "aslak.hellesoy@gmail.com"
    },
    {
      "name": "Aaron Garvey"
    },
    {
      "name": "Omar Gonzalez",
      "email": "omar@almerblank.com"
    },
    {
      "name": "Chris Young",
      "email": "chris@chrisyoung.org"
    },
    {
      "name": "Israel Halle",
      "email": "isra017@gmail.com"
    },
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com"
    },
    {
      "name": "Niklas Närhinen",
      "email": "niklas@narhinen.net"
    },
    {
      "name": "Kim, Jang-hwan",
      "email": "janghwan@gmail.com"
    },
    {
      "name": "Michael Zedeler",
      "email": "michael@zedeler.dk"
    },
    {
      "name": "Tom V",
      "email": "tom@toc.com"
    },
    {
      "name": "David Godfrey",
      "email": "reactiveraven@reactiveraven.co.uk"
    },
    {
      "name": "Paul Shannon",
      "url": "http://devpaul.com"
    },
    {
      "name": "Simon Dean",
      "email": "simon@simondean.org",
      "url": "http://www.simondean.org"
    },
    {
      "name": "John Wright",
      "email": "johngeorge.wright@gmail.com"
    },
    {
      "name": "Johny Jose",
      "email": "johny@playlyfe.com"
    },
    {
      "name": "Marat Dyatko",
      "email": "vectart@gmail.com"
    },
    {
      "name": "Tim Perry",
      "email": "tim.perry@softwire.com"
    },
    {
      "name": "Fedotov Daniil",
      "email": "hairyhum@gmail.com"
    },
    {
      "name": "unknown",
      "email": "jharlin@NormanDev2.telogical.com"
    },
    {
      "name": "Ben Van Treese",
      "email": "vantreeseba@gmail.com"
    },
    {
      "name": "Gabe Hayes",
      "email": "gabriel.hayes@gmail.com"
    },
    {
      "name": "Brian Clozel",
      "email": "brian.clozel@gmail.com"
    },
    {
      "name": "Lukas Degener",
      "email": "l.degener@tarent.de"
    },
    {
      "name": "Simon Lampen",
      "email": "simonlampen@vinsight.net"
    },
    {
      "name": "Eddie Loeffen",
      "email": "eddieloeffen@gmail.com"
    },
    {
      "name": "Stanley Shyiko",
      "email": "stanley.shyiko@gmail.com"
    },
    {
      "name": "Artur Kania",
      "email": "kaniartur@gmail.com"
    },
    {
      "name": "Sam Saccone",
      "email": "sam@samx.it"
    },
    {
      "name": "Craig Morris",
      "email": "craig.michael.morris@gmail.com"
    },
    {
      "name": "Gary Taylor",
      "email": "gary.taylor@hismessages.com"
    },
    {
      "name": "Krispin Schulz",
      "email": "krispin.schulz@blackbridge.com"
    },
    {
      "name": "Elwyn",
      "email": "elwyn@L1.co.nz"
    },
    {
      "name": "Jan-Eric Duden",
      "email": "jeduden@gmail.com"
    },
    {
      "name": "kostya.misura",
      "email": "kostya.misura@gmail.com"
    },
    {
      "name": "Julian",
      "email": "microweb10@gmail.com"
    },
    {
      "name": "nebehr",
      "email": "thorgeir@tut.by"
    },
    {
      "name": "Jesse Harlin",
      "email": "harlinjesse@gmail.com"
    },
    {
      "name": "Sonny Piers",
      "email": "sonny@fastmail.net"
    },
    {
      "name": "Will Farrell",
      "email": "will@mojotech.com"
    },
    {
      "name": "Kevin Kirsche",
      "email": "Kev.Kirsche+GitHub@gmail.com"
    },
    {
      "name": "chrismilleruk",
      "email": "chrismilleruk@gmail.com"
    },
    {
      "name": "Mateusz Derks",
      "email": "mateusz.derks@schibsted.pl"
    },
    {
      "name": "Mark Amery",
      "email": "markamery@btinternet.com"
    },
    {
      "name": "Artem Repko",
      "email": "roby-boby@ukr.net"
    },
    {
      "name": "zs-zs",
      "email": "zsolt.zsigmondi@hotmail.com"
    },
    {
      "name": "Dale Gardner",
      "email": "dalegardner@live.com"
    },
    {
      "name": "Charles Rudolph",
      "email": "charles.rudolph@originate.com"
    },
    {
      "name": "Karthik Viswanath",
      "email": "karthik.viswanath-contractor@adp.com"
    },
    {
      "name": "Marcel Hoyer",
      "email": "mhoyer@pixelplastic.de"
    },
    {
      "name": "Artem Bronitsky",
      "email": "quex@yandex.ru"
    },
    {
      "name": "Karine Pires",
      "email": "karine.pires@alterway.fr"
    },
    {
      "name": "Rick Lee-Morlang",
      "email": "rick@lee-morlang.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/cucumber/cucumber-js.git"
  },
  "bugs": {
    "url": "http://github.com/cucumber/cucumber-js/issues",
    "email": "cukes@googlegroups.com"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/cucumber",
  "engines": {
    "node": ">=0.10"
  },
  "dependencies": {
    "callsite": "^1.0.0",
    "camel-case": "^1.2.0",
    "cli-table": "^0.3.1",
    "colors": "1.1.2",
    "commander": "^2.9.0",
    "cucumber-html": "0.2.3",
    "duration": "^0.2.0",
    "gherkin": "2.12.2",
    "lodash": "^3.10.1",
    "stack-chain": "1.3.5",
    "walkdir": "0.0.10"
  },
  "devDependencies": {
    "async": "^1.5.0",
    "browserify": "11.1.0",
    "coffee-script": "1.10.0",
    "connect": "3.4.0",
    "exorcist": "0.4.0",
    "fs-extra": "^0.26.0",
    "jasmine": "^2.3.2",
    "jshint": "2.8.0",
    "pogo": "0.10.0",
    "rimraf": "2.4.3",
    "serve-static": "1.10.0",
    "through": "2.3.8",
    "tmp": "0.0.28",
    "uglifyify": "3.0.1"
  },
  "scripts": {
    "feature-test": "./bin/cucumber.js -p build",
    "lint": "jshint bin bundler.js features lib spec",
    "test": "npm run lint && npm run unit-test && npm run feature-test",
    "unit-test": "jasmine",
    "build-release": "node ./scripts/release.js"
  },
  "bin": {
    "cucumber.js": "./bin/cucumber.js",
    "cucumber-js": "./bin/cucumber.js",
    "cucumberjs": "./bin/cucumber.js"
  },
  "license": "MIT",
  "readme": "# Cucumber.js\n\n[![Build Status](https://travis-ci.org/cucumber/cucumber-js.svg?branch=master)](https://travis-ci.org/cucumber/cucumber-js)\n[![Dependencies](https://david-dm.org/cucumber/cucumber-js.svg)](https://david-dm.org/cucumber/cucumber-js)\n[![Code Climate](https://codeclimate.com/github/cucumber/cucumber-js.svg)](https://codeclimate.com/github/cucumber/cucumber-js)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/cucumber/cucumber-js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n*Cucumber*, the [popular Behaviour-Driven Development tool](https://cucumber.io), brought to your JavaScript stack.\n\nIt runs on both Node.js and *modern* web browsers.\n\n## Prerequesites\n\n* [Node.js](https://nodejs.org) or [io.js](https://iojs.org)\n* [NPM](https://www.npmjs.com)\n\nCucumber.js is tested on:\n\n* Node.js 5, 4, 0.12, 0.10, and io.js (see [CI builds](https://travis-ci.org/cucumber/cucumber-js))\n* Google Chrome\n* Firefox\n* Safari\n* Opera\n\n## Usage\n\n### Install\n\nCucumber.js is available as an npm module.\n\nInstall globally with:\n\n``` shell\n$ npm install -g cucumber\n```\n\nInstall as a development dependency of your application with:\n\n``` shell\n$ npm install --save-dev cucumber\n```\n\n\n### Features\n\nFeatures are written with the [Gherkin syntax](https://github.com/cucumber/cucumber/wiki/Gherkin)\n\n``` gherkin\n# features/myFeature.feature\n\nFeature: Example feature\n  As a user of cucumber.js\n  I want to have documentation on cucumber\n  So that I can concentrate on building awesome applications\n\n  Scenario: Reading documentation\n    Given I am on the Cucumber.js GitHub repository\n    When I go to the README file\n    Then I should see \"Usage\" as the page title\n```\n\n### Support Files\n\nSupport files let you setup the environment in which steps will be run, and define step definitions.\n\n#### World\n\n*World* is a constructor function with utility properties, destined to be used in step definitions:\n\n```javascript\n// features/support/world.js\nvar zombie = require('zombie');\nfunction World() {\n  this.browser = new zombie(); // this.browser will be available in step definitions\n\n  this.visit = function (url, callback) {\n    this.browser.visit(url, callback);\n  };\n}\n\nmodule.exports = function() {\n  this.World = World;\n};\n```\n\nIf you need to perform operations before/after every scenario, use [hooks](#hooks).\n\n#### Step Definitions\n\nStep definitions are the glue between features written in Gherkin and the actual *SUT* (*system under test*). They are written in JavaScript.\n\nAll step definitions will run with `this` set to what is known as the *[World](https://github.com/cucumber/cucumber/wiki/A-Whole-New-World)* in Cucumber. It's an object exposing useful methods, helpers and variables to your step definitions. A new instance of `World` is created before each scenario.\n\nStep definitions are contained within one or more wrapper functions.\n\nThose wrappers are run before executing the feature suite. `this` is an object holding important properties like the `Given()`, `When()` and `Then()` functions. Another notable property is `World`; it contains a default `World` constructor that can be either extended or replaced.\n\nStep definitions are run when steps match their name. `this` is an instance of `World`.\n\n``` javascript\n// features/step_definitions/myStepDefinitions.js\n\nmodule.exports = function () {\n  this.Given(/^I am on the Cucumber.js GitHub repository$/, function (callback) {\n    // Express the regexp above with the code you wish you had.\n    // `this` is set to a World instance.\n    // i.e. you may use this.browser to execute the step:\n\n    this.visit('https://github.com/cucumber/cucumber-js', callback);\n\n    // The callback is passed to visit() so that when the job's finished, the next step can\n    // be executed by Cucumber.\n  });\n\n  this.When(/^I go to the README file$/, function (callback) {\n    // Express the regexp above with the code you wish you had. Call callback() at the end\n    // of the step, or callback.pending() if the step is not yet implemented:\n\n    callback.pending();\n  });\n\n  this.Then(/^I should see \"(.*)\" as the page title$/, function (title, callback) {\n    // matching groups are passed as parameters to the step definition\n\n    var pageTitle = this.browser.text('title');\n    if (title === pageTitle) {\n      callback();\n    } else {\n      callback(new Error(\"Expected to be on page with title \" + title));\n    }\n  });\n};\n```\n\n##### Promises\n\nInstead of Node.js-style callbacks, promises can be returned by step definitions:\n\n``` javascript\nthis.Given(/^I am on the Cucumber.js GitHub repository$/, function () {\n  // Notice how `callback` is omitted from the parameters\n  return this.visit('https://github.com/cucumber/cucumber-js');\n\n  // A promise, returned by zombie.js's `visit` method is returned to Cucumber.\n});\n```\n\nSimply omit the last `callback` parameter and return the promise.\n\n##### Synchronous step definitions\n\nOften, asynchronous behaviour is not needed in step definitions. Simply omit the callback parameter, do not return anything and Cucumber will treat the step definition function as synchronous:\n\n``` javascript\nthis.Given(/^I add one Cucumber$/, function () {\n  // Notice how `callback` is omitted from the parameters\n  this.cucumberCount += 1;\n});\n\n```\n\n##### Strings instead of regular expressions\n\nIt is also possible to use simple strings instead of regexps as step definition patterns:\n\n```javascript\nthis.Then('I should see \"$title\" as the page title', function (title, callback) {\n  // the above string is converted to the following Regexp by Cucumber:\n  // /^I should see \"([^\"]*)\" as the page title$/\n\n  var pageTitle = this.browser.text('title');\n  if (title === pageTitle) {\n    callback();\n  } else {\n    callback(new Error(\"Expected to be on page with title \" + title));\n  }\n});\n```\n\n`'I have $count \"$string\"'` would translate to `/^I have (.*) \"([^\"]*)\"$/`.\n\n##### Data Table\n\nWhen steps have a data table, they are passed an object with methods that can be used to access the data.\n\n- with column headers\n  - `hashes`: returns an array of objects where each row is converted to an object (column header is the key)\n  - `rows`: returns the table as a 2-D array, without the first row\n- without column headers\n  - `raw`: returns the table as a 2-D array\n  - `rowsHash`: returns an object where each row corresponds to an entry (first column is the key, second column is the value)\n\nSee this [feature](/features/data_tables.feature) for examples\n\n##### Timeouts\n\nBy default, asynchronous hooks and steps timeout after 5000 milliseconds.\nThis can be modified globally with:\n\n```js\n// features/support/env.js\n\nvar configure = function () {\n  this.setDefaultTimeout(60 * 1000);\n};\n\nmodule.exports = configure;\n```\n\nA specific step's timeout can be set with:\n\n```js\n// features/step_definitions/my_steps.js\n\nvar mySteps = function () {\n  this.Given(/^a slow step$/, {timeout: 60 * 1000}, function(callback) {\n    // Does some slow browser/filesystem/network actions\n  });\n};\n\nmodule.exports = mySteps;\n```\n\n#### Hooks\n\nHooks can be used to prepare and clean the environment before and after each scenario is executed.\nHooks can use callbacks, return promises, or be synchronous.\nThe first argument to hooks is always the current scenario. See\n[Cucumber.Api.Scenario](https://github.com/cucumber/cucumber-js/blob/master/lib/cucumber/api/scenario.js)\nfor more information.\n\n##### Before hooks\n\nTo run something before every scenario, use before hooks:\n\n``` javascript\n// features/support/hooks.js (this path is just a suggestion)\n\nvar myHooks = function () {\n  this.Before(function (scenario) {\n    // Just like inside step definitions, \"this\" is set to a World instance.\n    // It's actually the same instance the current scenario step definitions\n    // will receive.\n\n    // Let's say we have a bunch of \"maintenance\" methods available on our World\n    // instance, we can fire some to prepare the application for the next\n    // scenario:\n\n    this.bootFullTextSearchServer();\n    this.createSomeUsers();\n  });\n};\n\nmodule.exports = myHooks;\n```\n\nIf you need to run asynchronous code, simply accept a callback in your hook function and run it when you're done:\n\n``` javascript\nthis.Before(function (scenario, callback) {\n  this.createUsers(callback);\n});\n```\n\nOr return a promise:\n\n```javascript\nthis.Before(function (scenario) {\n  // assuming this.createUsers returns a promise:\n  return this.createUsers();\n});\n```\n\n##### After hooks\n\nThe *before hook* counterpart is the *after hook*. It's similar in shape but is executed, well, *after* every scenario:\n\n```javascript\n// features/support/after_hooks.js\n\nvar myAfterHooks = function () {\n  this.After(function (scenario) {\n    // Again, \"this\" is set to the World instance the scenario just finished\n    // playing with.\n\n    // We can then do some cleansing:\n\n    this.emptyDatabase();\n    this.shutdownFullTextSearchServer();\n  });\n};\n\nmodule.exports = myAfterHooks;\n```\n\n##### Around hooks\n\nIt's also possible to combine both before and after hooks in one single definition with the help of *around hooks*:\n\n```javascript\n// features/support/advanced_hooks.js\n\nmyAroundHooks = function () {\n  this.Around(function (scenario, runScenario) {\n    // \"this\" is - as always - an instance of World promised to the scenario.\n\n    // First do the \"before scenario\" tasks:\n\n    this.bootFullTextSearchServer();\n    this.createSomeUsers();\n\n    // When the \"before\" duty is finished, tell Cucumber to execute the scenario\n    // and pass a function to be called when the scenario is finished:\n\n    // The first argument to runScenario is the error, if any, of the before tasks\n    // The second argument is a function which performs the after tasks\n    //   it can use callbacks, return a promise or be synchronous\n    runScenario(null, function () {\n      // Now, we can do our \"after scenario\" stuff:\n\n      this.emptyDatabase();\n      this.shutdownFullTextSearchServer();\n    });\n  });\n};\n\nmodule.exports = myAroundHooks;\n```\n\nAs with `Before` and `After` hooks, `Around` hooks functions (both pre- and post-scenario functions) can accept a callback or return a promise if you need asynchronous operations.\n\n##### Tagged hooks\n\nHooks can be conditionally elected for execution based on the tags of the scenario.\n\n``` javascript\n// features/support/hooks.js (this path is just a suggestion)\n\nvar myHooks = function () {\n  this.Before(\"@foo\", \"@bar,@baz\", function (scenario) {\n    // This hook will be executed before scenarios tagged with @foo and either\n    // @bar or @baz.\n\n    // ...\n  });\n};\n\nmodule.exports = myHooks;\n```\n\n##### Attachments\n\nYou can attach text, images and files to the Cucumber report using the scenario object:\n\n``` javascript\nthis.After(function (scenario) {\n  scenario.attach('Some text');\n});\n```\n\nBy default, text is saved with a MIME type of `text/plain`.  You can also specify\na different MIME type:\n\n``` javascript\nthis.After(function (scenario) {\n  scenario.attach('{\"name\": \"some JSON\"}', 'application/json');\n});\n```\n\nImages and other binary data can be attached using a [stream.Readable](https://nodejs.org/api/stream.html). In that case, passing a callback to `attach()` becomes mandatory:\n\n``` javascript\nthis.After(function (scenario, callback) {\n  if (scenario.isFailed()) {\n    var stream = getScreenshotOfError();\n    scenario.attach(stream, 'image/png', function(err) {\n      callback(err);\n    });\n  }\n  else {\n    callback();\n  }\n});\n```\n\nImages and binary data can also be attached using a [Buffer](https://nodejs.org/api/buffer.html):\n\n``` javascript\nthis.After(function (scenario) {\n  if (scenario.isFailed()) {\n    var buffer = getScreenshotOfError();\n    scenario.attach(buffer, 'image/png');\n  }\n});\n```\n\nHere is an example of saving a screenshot using [WebDriver](https://www.npmjs.com/package/selenium-webdriver)\nwhen a scenario fails:\n\n``` javascript\nthis.After(function (scenario, callback) {\n  if (scenario.isFailed()) {\n    webDriver.takeScreenshot().then(stream) {\n      scenario.attach(stream, 'image/png', callback);\n    }, function(err) {\n      callback(err);\n    });\n  }\n  else {\n    callback();\n  }\n});\n```\n\n##### After features event\n\nThe *after features event* is emitted once all features have been executed, just before the process exits. It can be used for tasks such as closing your browser after running automated browser tests with [selenium](https://code.google.com/p/selenium/wiki/WebDriverJs) or [phantomjs](http://phantomjs.org/).\n\nnote: There are \"Before\" and \"After\" events for each of the following: \"Features\", \"Feature\", \"Scenario\", \"Step\" as well as the standalone events \"Background\" and \"StepResult\". e.g. \"BeforeScenario\".\n\n```javascript\n// features/support/after_hooks.js\nvar myAfterHooks = function () {\n  this.registerHandler('AfterFeatures', function (event, callback) {\n    // clean up!\n    // Be careful, there is no World instance available on `this` here\n    // because all scenarios are done and World instances are long gone.\n    callback();\n  });\n}\n\nmodule.exports = myAfterHooks;\n```\n\n### CLI\n\nCucumber.js includes a binary file to execute the features.\n\nIf you installed cucumber.js globally, you may run it with:\n\n``` shell\n$ cucumber.js\n```\n\nIf you installed Cucumber locally, you may need to specify the path to the binary:\n\n``` shell\n$ ./node_modules/.bin/cucumber.js\n```\n\n**Note to Windows users:** invoke Cucumber.js with `cucumber-js` instead of `cucumber.js`. The latter is causing the operating system to invoke JScript instead of Node.js, because of the so-called file extension.\n\n#### Running specific features\n\n* Specify a feature file\n  * `$ cucumber.js features/my_feature.feature`\n* Specify a scenario by its line number\n  * `$ cucumber.js features/my_feature.feature:3`\n* Use [Tags](#tags)\n\n#### Requiring support files\n\nUse `--require <FILE|DIR>` to require files before executing the features.\nIf not used, all \"*.js\" files (and other extensions specifed by `--compiler`) that are siblings\nor below the features will be loaded automatically. Automatic\nloading is disabled when this option is specified, and all loading becomes explicit.\nFiles under directories named \"support\" are always loaded first\n\n#### Formatters\n\nUse `--format <TYPE[:PATH]>` to specify the format of the output.\nIf PATH is not supplied, the formatter prints to stdout.\nIf PATH is supplied, it prints to the given file.\nIf multiple formats are specified with the same output, only the last is used.\n\nBuilt-in formatters\n* json - prints the feature as JSON\n* pretty - prints the feature as is (default)\n* progress - prints one character per scenario\n* rerun - prints the paths of the failing scenarios ([example](/features/rerun_formatter.feature))\n  * suggested use: add the rerun formatter to your default profile and the output file to your `.gitignore`\n* summary - prints a summary only, after all scenarios were executed\n\n#### Tags\n\nUse `--tags <EXPRESSION>` to run specific features or scenarios.\n\n* `--tag @dev`: tagged with @dev\n* `--tag ~@dev`: NOT tagged with `@dev`\n* `--tags @foo,@bar`: tagged with `@foo` OR `bar`\n* `--tags @foo --tags @bar`: tagged with `@foo` AND `bar`\n\n#### Transpilers\n\nStep definitions and support files can be written in other languages that transpile to javascript.\nThis done with the CLI option `--compiler <file_extension>:<module_name>`.\nBelow are some examples\n\n* [CoffeeScript](https://www.npmjs.com/package/coffee-script): `--compiler coffee:coffee-script/register`\n* [TypeScript](https://www.npmjs.com/package/ts-node): `--compiler ts:ts-node/register`\n* [Pogo](https://www.npmjs.com/package/pogo): `--compiler pogo:pogo`\n\n### Custom Snippet Syntax\n\nUndefined steps snippets are printed in javascript by default.\nCustom snippet snytaxes can be used with `--snippet-syntax <FILE>`.\nSee [here](/features/step_definition_snippets_custom_syntax.feature) for an example.\n\n##### Building a custom snippet syntax\n\n* See the [JavaScript syntax](/lib/cucumber/support_code/step_definition_snippet_builder/javascript_syntax.js) for an example. Please open an issue if you need more information.\n* Please add the keywords `cucumber` and `snippets` to your package,\nso it can easily be found by searching [npm](https://www.npmjs.com/search?q=cucumber+snippets).\n\n### Examples\n\nA few example apps are available for you to browse:\n\n* [Rails app serving features in the browser](https://github.com/jbpros/cucumber-js-example)\n* [Express.js app running features in the cli](https://github.com/olivoil/NodeBDD)\n\n## Contribute\n\nSee [CONTRIBUTING](https://github.com/cucumber/cucumber-js/blob/master/CONTRIBUTING.md).\n\n## Help & support\n\n* Twitter: [@cucumber_js](https://twitter.com/cucumber_js/)\n* IRC: [#cucumber](http://webchat.freenode.net?channels=cucumber&uio=d4) on Freenode\n* Google Groups: [cukes](https://groups.google.com/group/cukes)\n* Website: [cucumber.io](https://cucumber.io)\n",
  "readmeFilename": "README.md",
  "_id": "cucumber@0.9.2",
  "_from": "cucumber@"
}
