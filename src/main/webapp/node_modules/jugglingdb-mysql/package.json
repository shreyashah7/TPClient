{
  "name": "jugglingdb-mysql",
  "version": "0.0.10",
  "description": "MySQL adapter for JugglingDB",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "jugglingdb": ">= 0.3.0",
    "mysql": ">= 2.0.0-alpha3",
    "should": "~3.0.1",
    "coffee-script": "~1.6.3",
    "semicov": "~0.1.1-2"
  },
  "devDependencies": {
    "coffee-script": "latest",
    "should": "~1.2.2",
    "mocha": "~1.8.2",
    "semicov": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jugglingdb/mysql-adapter.git"
  },
  "author": {
    "name": "Anatoliy Chakkaev",
    "email": "mail@anatoliy.in"
  },
  "maintainers": [
    {
      "name": "dgsan",
      "url": "https://github.com/dgsan"
    },
    {
      "name": "Anatoliy Chakkaev",
      "url": "https://github.com/1602"
    }
  ],
  "license": "MIT",
  "readme": "## JugglingDB-MySQL [![Build Status](https://travis-ci.org/jugglingdb/mysql-adapter.png)](https://travis-ci.org/jugglingdb/mysql-adapter)\n\nMySQL adapter for JugglingDB.\n\n## Usage\n\nTo use it you need `jugglingdb@0.2.x`.\n\n1. Setup dependencies in `package.json`:\n\n    ```json\n    {\n      ...\n      \"dependencies\": {\n        \"jugglingdb\": \"0.2.x\",\n        \"jugglingdb-mysql\": \"latest\"\n      },\n      ...\n    }\n    ```\n\n2. Use:\n\n    ```javascript\n    var Schema = require('jugglingdb').Schema;\n    var schema = new Schema('mysql', {\n        database: 'myapp_test',\n        username: 'root'\n    });\n    ```\n    You can optionally pass a few additional parameters supported by `node-mysql`, most particularly `password` and `collation`. `Collation` currently defaults to `utf8mb4_general_ci`. The `collation` value will also be used to derive the connection charset.\n\n## Running tests\n\n    npm test\n    \n## Using the `dataType` field/column option with MySQL\n\nThe jugglingdb MySQL adapter now supports using the `dataType`  column/property attribute to specify what MySQL column type is used for many jugglingdb types.\n\nThe following type-dataType combinations are supported:\n* <h4> Number </h4>\n  * <h5> integer </h5>\n     * tinyint\n     * smallint\n     * mediumint\n     * int\n     * bigint\n     \n     Use the `limit` option to alter the display width.\n\n     Example:\n      `{ count : { type: Number, dataType: 'smallInt' }}`\n\n  * <h5> floating point types </h5>\n     * float\n     * double\n     \n     Use the `precision` and `scale` options to specify custom precision. Default is (16,8).\n\n     Example:\n      `{ average : { type: Number, dataType: 'float', precision: 20, scale: 4 }}`\n\n  * <h5> fixed-point exact value types </h5>\n     * decimal\n     * numeric\n\n     Use the `precision` and `scale` options to specify custom precision. Default is (9,2).\n     \n     These aren't likely to function as true fixed-point.\n     \n     Example:\n      `{ stdDev : { type: Number, dataType: 'decimal', precision: 12, scale: 8 }}`\n\n* <h4> String / Schema.Text / Schema.JSON </h4>\n  * varchar\n  * char\n  * text\n  * mediumtext\n  * tinytext\n  * longtext\n  \n  Example:\n   `{ userName : { type: String, dataType: 'char', limit: 24 }}`\n\n  Example:\n   `{ biography : { type: String, dataType: 'longtext' }}`\n\n* <h4> Date </h4>\n  * datetime\n  * timestamp\n  \n  Example:\n   `{ startTime : { type: Date, dataType: 'timestamp' }}`\n\n* <h4> Enum </h4>\n  Enums are special.\n  Create an Enum using Enum factory:\n  \n  ```javascript\n  var MOOD = schema.EnumFactory('glad', 'sad', 'mad');\n  MOOD.SAD;    // 'sad'\n  MOOD(2);     // 'sad'\n  MOOD('SAD'); // 'sad'\n  MOOD('sad'); // 'sad'\n  ```\n  \n  * `{ mood: { type: MOOD }}`\n  * `{ choice: { type: schema.EnumFactory('yes', 'no', 'maybe'), null: false }}`\n\n## Using OR and IN operator\n\n### OR\nMysql adapter now supports the or functionality. You can add an `or` array object to the where clause to join the arguments in the `or` array with an OR.\n    \nExample:\nThis example selects all the animals whose name are Penny AND type is either cat OR size is medium\n\n```javascript\nwhere : {\n    name : 'Penny',\n    or : [ { type : 'cat'},\n           { size : 'medium'}\n    ]\n}\n```\n\nIt's important to note that each object in the `or` array is treat as if it was in the \"where\" clause, thus you can create complex queries like this;\n\nExample:\nThe example below selects all large white dogs OR all cats who are either small or black color\n\n```javascript\nwhere : {\n    or : [ { type : 'dog', color : 'white', size : 'large'},\n           { type : 'cat', or : [ { size : 'small'},\n                                  { color : 'black'}\n                                ]\n           }\n    ]\n}\n```\n\nSQL translation for the above would be:\n\n```sql\nWHERE (type = 'dog' AND color = 'white' AND size = 'large')\n   OR (type = 'cat' AND (size = 'small' OR color = 'black'))\n```\n\n### IN\n\nIN operator is pretty straight forward. If you give any columns in the where clause an array, they will be interpreted to be an IN object\n\nExample:\nThe example below will look for items that have id 1, 4 or 6\n\n```javascript\nwhere : {\n    id : [1,4,6]\n}\n```\n\n## Select specific columns\n\nIn some cases, you may wish to select specific columns from the table, to do so simply use the `attributes` param.\n\n###Examples:\n\nreturns array of column data(ex. ['1','2','3']\n\n    Model.all({where: {name: 'Bill'}, attributes: 'id'},cb)\n\nreturns array of object literals(ex. [{id:'1'}, {id:'2'}, {id:'3'}]\n\n    Model.all({where: {name: 'Bill'}, attributes: ['id']},cb)\n\nreturns array of object literals(ex. [{id:'1', age:'25'}, {id:'2', age:'56'}, {id:'3', age: '44'}]\n\n    Model.all({where: {name: 'Bill'}, attributes: ['id', 'age']},cb)\n\n\n\n## Connection Pooling\nMysql adapter uses the pooling provided by the node-mysql module. Simply set `pool` option to true in the connection settings.\n\n### Pool Options\nTaken from node-mysql module\n\n* `waitForConnections`: Determines the pool's action when no connections are available and the limit has been reached. If `true`, the pool will queue the connection request and call it when one becomes available. If `false`, the pool will immediately call back with an error. (Default: `true`)\n* `connectionLimit`: The maximum number of connections to create at once.(Default: `10`)\n* `queueLimit`: The maximum number of connection requests the pool will queue before returning an error from `getConnection`. If set to `0`, there is no limit to the number of queued connection requests. (Default: `0`)\n\n## Creating Multi-Column Indexes\nThe mysql adapter supports the declaration of multi-column indexes on models via the the `indexes` option in the 3rd argument to `define`. \n\n```javascript\nUserData = db.define('UserData', {\n        email: { type: String, null: false, index: true },\n        name: String,\n        bio: Schema.Text,\n        birthDate: Date,\n        pendingPeriod: Number,\n        createdByAdmin: Boolean,\n    } , { indexes: {\n            index0: {\n                columns: 'email, createdByAdmin'\n            }\n        }\n    });\n```\n\n## MIT License\n\n```text\nCopyright (C) 2012 by Anatoliy Chakkaev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jugglingdb/mysql-adapter/issues"
  },
  "_id": "jugglingdb-mysql@0.0.10",
  "dist": {
    "shasum": "7f9d0efd13e79adb2e3c6eb781643fb1f39cae6f"
  },
  "_from": "jugglingdb-mysql@0.0.10",
  "_resolved": "https://registry.npmjs.org/jugglingdb-mysql/-/jugglingdb-mysql-0.0.10.tgz"
}
